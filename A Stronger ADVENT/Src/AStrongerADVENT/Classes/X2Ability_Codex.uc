//---------------------------------------------------------------------------------------
//  Copyright (c) 2016 Firaxis Games, Inc. All rights reserved.
//---------------------------------------------------------------------------------------
class X2Ability_Codex extends X2Ability
	config(GameData_SoldierSkills);

var localized string TeleportSuperpositionText;
var config int SUPERPOSITION_MAX_TILE_RADIUS;
var config int SUPERPOSITION_MIN_TILE_RADIUS;
var privatewrite name OriginalCyberusValueName;

static function array<X2DataTemplate> CreateTemplates()
{
	local array<X2DataTemplate> Templates;

	Templates.AddItem(CreateSuperpositionPrimeAbility());

	return Templates;
}


// Create Clone
// Teleport
static function X2AbilityTemplate CreateSuperpositionPrimeAbility()
{
	local X2AbilityTemplate Template;
	local X2AbilityTrigger_EventListener EventListener;
	local X2Condition_UnitProperty UnitPropertyCondition;
	local array<name> SkipExclusions;
	local X2Condition_UnitEffects ExcludeEffects;
	
	`CREATE_X2ABILITY_TEMPLATE(Template, 'TriggerSuperpositionPrime');

	Template.bDontDisplayInAbilitySummary = true;
	Template.AbilitySourceName = 'eAbilitySource_Standard';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_NeverShow;
	Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_codex_superposition";

	EventListener = new class'X2AbilityTrigger_EventListener';
	EventListener.ListenerData.Deferral = ELD_OnStateSubmitted;
	EventListener.ListenerData.EventID = 'UnitMoveFinished';
	EventListener.ListenerData.EventFn = class'XComGameState_Ability'.static.AbilityTriggerEventListener_DamagedTeleport;
	EventListener.ListenerData.Filter = eFilter_Unit;
	EventListener.ListenerData.Priority = 10000;    // Really low priority to ensure other listeners occur before this one
	Template.AbilityTriggers.AddItem(EventListener);

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;

	// The unit must be alive and not stunned
	UnitPropertyCondition = new class'X2Condition_UnitProperty';
	UnitPropertyCondition.ExcludeDead = true;
	UnitPropertyCondition.ExcludeAlive = false;
	UnitPropertyCondition.ExcludeStunned = true;
	Template.AbilityShooterConditions.AddItem(UnitPropertyCondition);

	SkipExclusions.AddItem(class'X2StatusEffects'.default.BurningName);
	Template.AddShooterEffectExclusions(SkipExclusions);

	ExcludeEffects = new class'X2Condition_UnitEffects';
	ExcludeEffects.AddExcludeEffect(class'X2Effect_MindControl'.default.EffectName, 'AA_UnitIsMindControlled');
	Template.AbilityShooterConditions.AddItem(ExcludeEffects);

	Template.bSkipFireAction = true;
	Template.ModifyNewContextFn = SuperpositionPrime_ModifyActivatedAbilityContext;
	Template.BuildNewGameStateFn = SuperpositionPrime_BuildGameState;
	Template.BuildVisualizationFn = SuperpositionPrime_BuildVisualization;
	Template.CinescriptCameraType = "Cyberus_Superposition";
//BEGIN AUTOGENERATED CODE: Template Overrides 'TriggerSuperposition'
	Template.bFrameEvenWhenUnitIsHidden = true;
//END AUTOGENERATED CODE: Template Overrides 'TriggerSuperposition'

	return Template;
}

simulated function SuperpositionPrime_ModifyActivatedAbilityContext(XComGameStateContext Context)
{
	local XComGameState_Unit UnitState;
	local XComGameStateContext_Ability AbilityContext;
	local XComGameStateHistory History;
	local PathPoint NextPoint, EmptyPoint;
	local XGUnit UnitVisualizer;
	local PathingInputData InputData;
	local XComCoverPoint CoverPoint;
	local XComWorldData World;
	local TTile TempTile;
	local bool bCoverPointFound;

	History = `XCOMHISTORY;
	World = `XWORLD;

	AbilityContext = XComGameStateContext_Ability(Context);
	
	UnitState = XComGameState_Unit(History.GetGameStateForObjectID(AbilityContext.InputContext.SourceObject.ObjectID));
	//UnitState = XComGameState_Unit(AbilityContext.AssociatedState.GetGameStateForObjectID(AbilityContext.InputContext.SourceObject.ObjectID));
	`assert(UnitState != none);

	// Build the MovementData for the path
	UnitVisualizer = XGUnit(UnitState.GetVisualizer());

	// First posiiton is the current location
	InputData.MovementTiles.AddItem(UnitState.TileLocation);

	NextPoint.Position = World.GetPositionFromTileCoordinates(UnitState.TileLocation);
	NextPoint.Traversal = eTraversal_Teleport;
	NextPoint.PathTileIndex = 0;
	InputData.MovementData.AddItem(NextPoint);

	// Second position: Currently selected from WorldData's get closest cover function but doesn't
	// weigh the value of cover points
	bCoverPointFound = UnitVisualizer.m_kBehavior.PickRandomCoverLocation(NextPoint.Position, default.SUPERPOSITION_MIN_TILE_RADIUS, default.SUPERPOSITION_MAX_TILE_RADIUS);
	TempTile = World.GetTileCoordinatesFromPosition(NextPoint.Position);

	if( !bCoverPointFound )
	{
		CoverPoint.TileLocation =  World.FindClosestValidLocation(NextPoint.Position, false, false, false);
		TempTile = World.GetTileCoordinatesFromPosition(CoverPoint.TileLocation);
	}

	NextPoint = EmptyPoint;
	World.GetFloorPositionForTile(TempTile, NextPoint.Position);
	NextPoint.Traversal = eTraversal_Landing;
	NextPoint.PathTileIndex = 1;
	InputData.MovementData.AddItem(NextPoint);
	InputData.MovementTiles.AddItem(TempTile);

	//Now add the path to the input context
	InputData.MovingUnitRef = UnitState.GetReference();
	AbilityContext.InputContext.MovementPaths.AddItem(InputData);
}

simulated function XComGameState SuperpositionPrime_BuildGameState(XComGameStateContext Context)
{
	local XComGameState NewGameState;
	local XComGameState_Unit OldUnitState, UnitState, SpawnedCodexUnit;
	local XComGameStateContext_Ability AbilityContext;
	local vector NewLocation;
	local TTile NewTileLocation;
	local XComWorldData World;
	local X2EventManager EventManager;
	local XComAISpawnManager SpawnManager;
	local int SourceUnitHP;
	local StateObjectReference NewUnitRef;
	local int LastElementIndex;
	local XComGameState_AIGroup OldGroup;
	local UnitValue OriginalCodexObjectIDValue;
	local float OriginalCodexObjectID;

	World = `XWORLD;
	EventManager = `XEVENTMGR;
	SpawnManager = `SPAWNMGR;

	//Build the new game state frame
	NewGameState = TypicalAbility_BuildGameState(Context);

	AbilityContext = XComGameStateContext_Ability(NewGameState.GetContext());
	UnitState = XComGameState_Unit(NewGameState.ModifyStateObject(class'XComGameState_Unit', AbilityContext.InputContext.SourceObject.ObjectID));
	OldUnitState = UnitState;
	
	if( OldUnitState != none )
	{
		// Do Superposition
		LastElementIndex = AbilityContext.InputContext.MovementPaths[0].MovementData.Length - 1;

		// Set the unit's new location
		// The last position in MovementData will be the end location
		`assert(LastElementIndex > 0);
		NewLocation = AbilityContext.InputContext.MovementPaths[0].MovementData[LastElementIndex].Position;
		NewTileLocation = World.GetTileCoordinatesFromPosition(NewLocation);
		UnitState.SetVisibilityLocation(NewTileLocation);

		AbilityContext.ResultContext.bPathCausesDestruction = MoveAbility_StepCausesDestruction(UnitState, AbilityContext.InputContext, 0, LastElementIndex);
		MoveAbility_AddTileStateObjects(NewGameState, UnitState, AbilityContext.InputContext, 0, LastElementIndex);

		EventManager.TriggerEvent('ObjectMoved', UnitState, UnitState, NewGameState);
		EventManager.TriggerEvent('UnitMoveFinished', UnitState, UnitState, NewGameState);

		SourceUnitHP = UnitState.GetCurrentStat(eStat_HP);

		if( SourceUnitHP > 1 )
		{
			UnitState.SetCurrentStat(eStat_HP, SourceUnitHP);

			// Remove the tile block of the original Codex
			World.ClearTileBlockedByUnitFlag(UnitState);

			// Spawn the Clone
			NewLocation = AbilityContext.InputContext.MovementPaths[0].MovementData[0].Position;
			OldGroup = UnitState.GetGroupMembership();
			NewUnitRef = SpawnManager.CreateUnit(NewLocation, UnitState.GetMyTemplateName(), OldUnitState.GetTeam(), false, false, NewGameState, , , , , OldGroup.ObjectID);
			SpawnedCodexUnit = XComGameState_Unit(NewGameState.GetGameStateForObjectID(NewUnitRef.ObjectID));
			SpawnedCodexUnit.SetCurrentStat(eStat_HP, SourceUnitHP);
			SpawnedCodexUnit.bTriggerRevealAI = false;

			// Make sure the Codex doesn't spawn with any action points this turn
			SpawnedCodexUnit.ActionPoints.Length = 0;

			UnitState.SetUnitFloatValue(class'X2Effect_SpawnUnit'.default.SpawnedUnitValueName, NewUnitRef.ObjectID, eCleanup_BeginTurn);

			// The newly spawned codex needs to be branded with the group's original Codex ID
			OriginalCodexObjectID = UnitState.ObjectID;
			if(UnitState.GetUnitValue(default.OriginalCyberusValueName, OriginalCodexObjectIDValue))
			{
				// If the UnitState has a value for OriginalCyberusValueName, use that since it is the original Codex of the group
				OriginalCodexObjectID = OriginalCodexObjectIDValue.fValue;
			}

			SpawnedCodexUnit.SetUnitFloatValue(default.OriginalCyberusValueName, OriginalCodexObjectID, eCleanup_BeginTactical);
			SpawnedCodexUnit.SetUnitFloatValue('NewSpawnedUnit', 1, eCleanup_BeginTactical);
		}
	}

	//Return the game state we have created
	return NewGameState;
}

// Camera looks at Codex
// Show the clone flyover
// Animate the clone with its stay animation
// Animate the original with its go animation
// Camera moves to teleport location
// Animate the original in with teleport stop
simulated function SuperpositionPrime_BuildVisualization(XComGameState VisualizeGameState)
{
	local XComGameStateHistory History;
	local XComGameStateContext_Ability  AbilityContext;
	local StateObjectReference InteractingUnitRef;
	local X2AbilityTemplate AbilityTemplate;
	local VisualizationActionMetadata EmptyTrack, ActionMetadata, OriginalCodexMetadata;
	local X2Action_PlaySoundAndFlyOver SoundAndFlyover;
	local XComGameState_Unit UnitState, SpawnedUnit;
	local UnitValue SpawnedUnitValue;
	local X2Action_SuperpositionUnitStay ShowUnitAction;
	local XGUnit OriginalCodex;
	local X2Action_CameraLookAt LookAtAction;	
	local X2Action_SuperpositionUnitGo MoveOriginalCodexAction;
	local X2Action_UpdateFOW FOWAction;
	
	History = `XCOMHISTORY;

	AbilityContext = XComGameStateContext_Ability(VisualizeGameState.GetContext());
	InteractingUnitRef = AbilityContext.InputContext.SourceObject;

	AbilityTemplate = class'XComGameState_Ability'.static.GetMyTemplateManager().FindAbilityTemplate(AbilityContext.InputContext.AbilityTemplateName);

	//****************************************************************************************
	//Configure the visualization track for the source
	//****************************************************************************************
	OriginalCodexMetadata = EmptyTrack;
	OriginalCodexMetadata.StateObject_OldState = History.GetGameStateForObjectID(InteractingUnitRef.ObjectID, eReturnType_Reference, VisualizeGameState.HistoryIndex - 1);
	OriginalCodexMetadata.StateObject_NewState = VisualizeGameState.GetGameStateForObjectID(InteractingUnitRef.ObjectID);
	OriginalCodexMetadata.VisualizeActor = History.GetVisualizer(InteractingUnitRef.ObjectID);

	// Get the original Codex
	UnitState = XComGameState_Unit(OriginalCodexMetadata.StateObject_NewState);

	// Get the spawned Codex
	UnitState.GetUnitValue(class'X2Effect_SpawnUnit'.default.SpawnedUnitValueName, SpawnedUnitValue);
	SpawnedUnit = XComGameState_Unit(VisualizeGameState.GetGameStateForObjectID(SpawnedUnitValue.fValue));

	UnitState = XComGameState_Unit(OriginalCodexMetadata.StateObject_NewState);
	LookAtAction = X2Action_CameraLookAt(class'X2Action_CameraLookAt'.static.AddToVisualizationTree(OriginalCodexMetadata, VisualizeGameState.GetContext(), false, OriginalCodexMetadata.LastActionAdded));
	LookAtAction.UseTether = false;
	LookAtAction.LookAtObject = UnitState;
	LookAtAction.BlockUntilActorOnScreen = true;

	SoundAndFlyOver = X2Action_PlaySoundAndFlyOver(class'X2Action_PlaySoundAndFlyover'.static.AddToVisualizationTree(OriginalCodexMetadata, AbilityContext));
	if (SpawnedUnit != none)
	{
		SoundAndFlyOver.SetSoundAndFlyOverParameters(None, AbilityTemplate.LocFlyOverText, '', eColor_Bad);
	}
	else
	{
		SoundAndFlyOver.SetSoundAndFlyOverParameters(None, TeleportSuperpositionText, '', eColor_Bad);
	}

	OriginalCodex = XGUnit(OriginalCodexMetadata.VisualizeActor);

	//****************************************************************************************
	//Configure the visualization track for the targets
	//****************************************************************************************
	if (SpawnedUnit != none)
	{
		// The Spawned unit should appear and play its change animation
		ActionMetadata = EmptyTrack;
		ActionMetadata.StateObject_OldState = SpawnedUnit;
		ActionMetadata.StateObject_NewState = ActionMetadata.StateObject_OldState;
		ActionMetadata.VisualizeActor = History.GetVisualizer(SpawnedUnit.ObjectID);

		ShowUnitAction = X2Action_SuperpositionUnitStay(class'X2Action_SuperpositionUnitStay'.static.AddToVisualizationTree(ActionMetadata, AbilityContext, false, SoundAndFlyOver));
		ShowUnitAction.OriginalCodex = OriginalCodex;
	}

	// Ensure that the movement data is as expected
	`assert((AbilityContext.InputContext.MovementPaths.Length == 1) && (AbilityContext.InputContext.MovementPaths[0].MovementData.Length == 2));

	// Teleport out
	// Move the camera
	// Teleport in
	MoveOriginalCodexAction = X2Action_SuperpositionUnitGo(class'X2Action_SuperpositionUnitGo'.static.AddToVisualizationTree(OriginalCodexMetadata, AbilityContext, false, SoundAndFlyOver));
	MoveOriginalCodexAction.bWaitForSpawnedUnitStay = SpawnedUnit != none;
	MoveOriginalCodexAction.Destination = AbilityContext.InputContext.MovementPaths[0].MovementData[1].Position;

	FOWAction = X2Action_UpdateFOW( class'X2Action_UpdateFOW'.static.AddToVisualizationTree( OriginalCodexMetadata, AbilityContext ) );
	FOWAction.ForceUpdate = true;
}

defaultproperties
{
	OriginalCyberusValueName="OriginalCyberusValue"
}
