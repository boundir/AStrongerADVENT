//---------------------------------------------------------------------------------------
//  Copyright (c) 2016 Firaxis Games, Inc. All rights reserved.
//---------------------------------------------------------------------------------------
class X2Ability_ASA_Codex extends X2Ability_Cyberus	config(GameData_SoldierSkills);

var config int CLONE_HEALTH_DIVIDER;

static function array<X2DataTemplate> CreateTemplates()
{
	local array<X2DataTemplate> Templates;

	Templates.AddItem(CreateSuperpositionPrimeAbility());

	return Templates;
}

static function X2AbilityTemplate CreateSuperpositionPrimeAbility()
{
	local X2AbilityTemplate Template;
	local X2AbilityTrigger_EventListener EventListener;
	local X2Condition_UnitProperty UnitPropertyCondition;
	local array<name> SkipExclusions;
	local X2Condition_UnitEffects ExcludeEffects;
	
	`CREATE_X2ABILITY_TEMPLATE(Template, 'TriggerSuperpositionPrime');

	Template.bDontDisplayInAbilitySummary = true;
	Template.AbilitySourceName = 'eAbilitySource_Standard';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_NeverShow;
	Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_codex_superposition";

	EventListener = new class'X2AbilityTrigger_EventListener';
	EventListener.ListenerData.Deferral = ELD_OnStateSubmitted;
	EventListener.ListenerData.EventID = 'UnitMoveFinished';
	EventListener.ListenerData.EventFn = class'XComGameState_Ability'.static.AbilityTriggerEventListener_DamagedTeleport;
	EventListener.ListenerData.Filter = eFilter_Unit;
	EventListener.ListenerData.Priority = 10000;    // Really low priority to ensure other listeners occur before this one
	Template.AbilityTriggers.AddItem(EventListener);

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;

	// The unit must be alive and not stunned
	UnitPropertyCondition = new class'X2Condition_UnitProperty';
	UnitPropertyCondition.ExcludeDead = true;
	UnitPropertyCondition.ExcludeAlive = false;
	UnitPropertyCondition.ExcludeStunned = true;
	Template.AbilityShooterConditions.AddItem(UnitPropertyCondition);

	SkipExclusions.AddItem(class'X2StatusEffects'.default.BurningName);
	Template.AddShooterEffectExclusions(SkipExclusions);

	ExcludeEffects = new class'X2Condition_UnitEffects';
	ExcludeEffects.AddExcludeEffect(class'X2Effect_MindControl'.default.EffectName, 'AA_UnitIsMindControlled');
	Template.AbilityShooterConditions.AddItem(ExcludeEffects);

	Template.bSkipFireAction = true;
	Template.ModifyNewContextFn = Superposition_ModifyActivatedAbilityContext;
	Template.BuildNewGameStateFn = SuperpositionPrime_BuildGameState;
	Template.BuildVisualizationFn = Superposition_BuildVisualization;
	Template.CinescriptCameraType = "Cyberus_Superposition";
//BEGIN AUTOGENERATED CODE: Template Overrides 'TriggerSuperposition'
	Template.bFrameEvenWhenUnitIsHidden = true;
//END AUTOGENERATED CODE: Template Overrides 'TriggerSuperposition'

	return Template;
}

simulated function XComGameState SuperpositionPrime_BuildGameState(XComGameStateContext Context)
{
	local XComGameState NewGameState;
	local XComGameState_Unit OldUnitState, UnitState, SpawnedCodexUnit;
	local XComGameStateContext_Ability AbilityContext;
	local vector NewLocation;
	local TTile NewTileLocation;
	local XComWorldData World;
	local X2EventManager EventManager;
	local XComAISpawnManager SpawnManager;
	local int SourceUnitHP, CloneHP;
	local StateObjectReference NewUnitRef;
	local int LastElementIndex;
	local XComGameState_AIGroup OldGroup;
	local UnitValue OriginalCodexObjectIDValue;
	local float OriginalCodexObjectID;

	World = `XWORLD;
	EventManager = `XEVENTMGR;
	SpawnManager = `SPAWNMGR;

	//Build the new game state frame
	NewGameState = TypicalAbility_BuildGameState(Context);

	AbilityContext = XComGameStateContext_Ability(NewGameState.GetContext());
	UnitState = XComGameState_Unit(NewGameState.ModifyStateObject(class'XComGameState_Unit', AbilityContext.InputContext.SourceObject.ObjectID));
	OldUnitState = UnitState;
	
	if( OldUnitState != none )
	{
		// Do Superposition
		LastElementIndex = AbilityContext.InputContext.MovementPaths[0].MovementData.Length - 1;

		// Set the unit's new location
		// The last position in MovementData will be the end location
		`assert(LastElementIndex > 0);
		NewLocation = AbilityContext.InputContext.MovementPaths[0].MovementData[LastElementIndex].Position;
		NewTileLocation = World.GetTileCoordinatesFromPosition(NewLocation);
		UnitState.SetVisibilityLocation(NewTileLocation);

		AbilityContext.ResultContext.bPathCausesDestruction = MoveAbility_StepCausesDestruction(UnitState, AbilityContext.InputContext, 0, LastElementIndex);
		MoveAbility_AddTileStateObjects(NewGameState, UnitState, AbilityContext.InputContext, 0, LastElementIndex);

		EventManager.TriggerEvent('ObjectMoved', UnitState, UnitState, NewGameState);
		EventManager.TriggerEvent('UnitMoveFinished', UnitState, UnitState, NewGameState);

		SourceUnitHP = UnitState.GetCurrentStat(eStat_HP);

		if( SourceUnitHP > 1 )
		{
			CloneHP = SourceUnitHP / default.CLONE_HEALTH_DIVIDER;  // Rounds down so that the original gets the extra HP on odd values

			UnitState.SetCurrentStat(eStat_HP, SourceUnitHP);

			// Remove the tile block of the original Codex
			World.ClearTileBlockedByUnitFlag(UnitState);

			// Spawn the Clone
			NewLocation = AbilityContext.InputContext.MovementPaths[0].MovementData[0].Position;
			OldGroup = UnitState.GetGroupMembership();
			NewUnitRef = SpawnManager.CreateUnit(NewLocation, UnitState.GetMyTemplateName(), OldUnitState.GetTeam(), false, false, NewGameState, , , , , OldGroup.ObjectID);
			SpawnedCodexUnit = XComGameState_Unit(NewGameState.GetGameStateForObjectID(NewUnitRef.ObjectID));
			SpawnedCodexUnit.SetCurrentStat(eStat_HP, CloneHP);
			SpawnedCodexUnit.bTriggerRevealAI = false;

			// Make sure the Codex doesn't spawn with any action points this turn
			SpawnedCodexUnit.ActionPoints.Length = 0;

			UnitState.SetUnitFloatValue(class'X2Effect_SpawnUnit'.default.SpawnedUnitValueName, NewUnitRef.ObjectID, eCleanup_BeginTurn);

			// The newly spawned codex needs to be branded with the group's original Codex ID
			OriginalCodexObjectID = UnitState.ObjectID;
			if(UnitState.GetUnitValue(default.OriginalCyberusValueName, OriginalCodexObjectIDValue))
			{
				// If the UnitState has a value for OriginalCyberusValueName, use that since it is the original Codex of the group
				OriginalCodexObjectID = OriginalCodexObjectIDValue.fValue;
			}

			SpawnedCodexUnit.SetUnitFloatValue(default.OriginalCyberusValueName, OriginalCodexObjectID, eCleanup_BeginTactical);
			SpawnedCodexUnit.SetUnitFloatValue('NewSpawnedUnit', 1, eCleanup_BeginTactical);
		}
	}

	//Return the game state we have created
	return NewGameState;
}
